'use strict';

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

// Parent class
class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10);
  clicks = 0;

  constructor(coords, distance, duration) {
    this.coords = coords; // [lat, lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }

  _setDescription() {
    // prettier-ignore üëàüèº
    const months = [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December',
    ];

    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }
}

// child class of Workout
class Running extends Workout {
  type = 'running';

  constructor(coords, distance, duration, cadance) {
    super(coords, distance, duration);
    this.cadance = cadance;
    this.calcPace();
    this._setDescription();
  }

  calcPace() {
    this.pace = this.duration / this.distance; // min/km
    return this.pace;
  }
}

// child class of Workout
class Cycling extends Workout {
  type = 'cycling';

  constructor(coords, distance, duration, alivationGain) {
    super(coords, distance, duration);
    this.alivationGain = alivationGain;
    this.calcSpeed();
    this._setDescription();
  }

  calcSpeed() {
    this.speed = this.distance / (this.duration / 60); // km/h
    return this.speed;
  }
}

// =================== Aplication Architecture
class App {
  #map;
  #mapEvent;
  #mapZoomLevel = 15;
  #workouts = [];

  constructor() {
    // –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this._getPosition();

    // –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    this._getLocalStorage();

    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    inputType.addEventListener('change', this._toggleElevationField);
    form.addEventListener('submit', this._newWorkout.bind(this));
    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));
  }

  // –ø–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
  _getPosition() {
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert('Could not get your current position ‚ùå');
        }
      );
  }

  // –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É
  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;

    const coords = [latitude, longitude];

    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);

    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    this.#map.on('click', this._showForm.bind(this));

    this.#workouts.forEach((work) => {
      this._renderWorkoutMarker(work);
    });
  }

  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  // —Å–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  _hideForm() {
    inputDistance.value =
      inputCadence.value =
      inputDuration.value =
      inputElevation.value =
        '';
    form.style.display = 'none';
    form.classList.add('hidden');
    setTimeout(() => (form.style.display = 'grid'), 1000);
  }

  // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º—É "–±–µ–≥" –∏ "–≤–µ–ª–∏–∫"
  _toggleElevationField() {
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
    inputDistance.focus();
  }

  // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  _newWorkout(e) {
    // —Ñ-—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const validInputs = (...inputs) =>
      inputs.every((inp) => Number.isFinite(inp));
    const allPositive = (...inputs) => inputs.every((inp) => inp > 0);

    e.preventDefault();

    // –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;

    // –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ–≥ - —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–µ–≥–∞
    if (type === 'running') {
      const cadance = +inputCadence.value;

      // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      if (
        !validInputs(distance, duration, cadance) ||
        !allPositive(distance, duration, cadance)
      )
        return alert('Inputs have to be positive numbers!');

      workout = new Running([lat, lng], distance, duration, cadance);
    }

    // –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–µ–ª–∏–∫ - —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –≤–µ–ª–∏–∫–∞
    if (type === 'cycling') {
      const elevation = +inputElevation.value;

      // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration)
      )
        return alert('Inputs have to be positive numbers!');

      workout = new Cycling([lat, lng], distance, duration, elevation);
    }

    // –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    this.#workouts.push(workout);

    // –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ –∫–∞–∫ –º–∞—Ä–∫–µ—Ä
    this._renderWorkoutMarker(workout);

    // –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Å–ø–∏—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    this._renderWorkout(workout);

    // —Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
    this._hideForm();

    // —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    this._setLocalStorage();
  }

  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
  _renderWorkoutMarker(workout) {
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(
        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`
      )
      .openPopup();
  }

  // –ø–æ–∫–∞—ã–∑–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Å–∞–π–¥–±–∞—Ä–µ
  _renderWorkout(workout) {
    let html = `
            <li class="workout workout--${workout.type}" data-id="${
      workout.id
    }">
                <h2 class="workout__title">${workout.description}</h2>
                <div class="workout__details">
                    <span class="workout__icon">${
                      workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'
                    }</span>
                    <span class="workout__value">${workout.distance}</span>
                    <span class="workout__unit">km</span>
                </div> 
                <div class="workout__details">
                    <span class="workout__icon">‚è±</span>
                    <span class="workout__value">${workout.duration}</span>
                    <span class="workout__unit">min</span>
                </div>
            `;

    if (workout.type === 'running') {
      html += `
                <div class="workout__details">
                    <span class="workout__icon">‚ö°Ô∏è</span>
                    <span class="workout__value">${workout.pace.toFixed(
                      1
                    )}</span>
                    <span class="workout__unit">min/km</span>
                </div>
                <div class="workout__details">
                    <span class="workout__icon">ü¶∂üèº</span>
                    <span class="workout__value">${workout.cadance}</span>
                    <span class="workout__unit">spm</span>
                </div>
            </li> 
            `;
    }

    if (workout.type === 'cycling') {
      html += `
                <div class="workout__details">
                    <span class="workout__icon">‚ö°Ô∏è</span>
                    <span class="workout__value">${workout.speed.toFixed(
                      1
                    )}</span>
                    <span class="workout__unit">km/h</span>
                </div>
                <div class="workout__details">
                    <span class="workout__icon">‚õ∞</span>
                    <span class="workout__value">${workout.elevationGain}</span>
                    <span class="workout__unit">m</span>
                </div>
            </li>
            `;
    }

    form.insertAdjacentHTML('afterend', html);
  }

  _moveToPopup(e) {
    const workoutEl = e.target.closest('.workout');

    if (!workoutEl) return;

    const workout = this.#workouts.find(
      (work) => work.id === workoutEl.dataset.id
    );

    this.#map.setView(workout.coords, this.#mapZoomLevel, {
      animate: true,
      pan: {
        duration: 1,
      },
    });
  }

  // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω
  _setLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this.#workouts)); // –Ω–µ –∏—Å–ø–æ–ª—å–∑. –¥–ª—è –±–æ–ª—å. –∫–æ–ª-–≤–∞ –¥–∞–Ω–Ω—ã—Ö.
  }

  // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É JSON –∏ –ø–æ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç, –º—ã —Ç–µ—Ä—è–µ–º —Ü–µ–ø–æ—á–∫—É –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤;

  // –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ª–æ–∫–∞–ª—å–Ω. —Ö—Ä–∞–Ω
  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem('workouts'));

    if (!data) return;

    this.#workouts = data;

    this.#workouts.forEach((work) => {
      this._renderWorkout(work);
    });
  }

  // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω
  reset() {
    localStorage.removeItem('workouts');
    location.reload();
  }
}

const app = new App();
